import { KitBuffer } from "../util/const";

const fs = window.require('fs');

function unpack(str, padLength, padByte) {
  let strBuffer = Array(padLength).fill(padByte);
  strBuffer.splice(0, str.length, ...Buffer.from(str));

  return strBuffer;
}

function getHeader() {
  let block = [
    0x4b, 0x49, 0x54, 0x48, 0x00, 0x80, 0x00, 0x00, 0xeb, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  ];

  return block;
}

function getPadBlock1(midi) {
  //(0x39) midi

  // note: sensitivity here is the INTERNAL value
  // 1=11 0x0c, 2=14 3=17 4=20 5=23 6=26 7=29 8=32
  let block = [
    0x4b, 0x49, 0x54, 0x49, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
    0x32, 0x32, 0x41, 0x63, 0x42, 0x64, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x00, 0x09, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0a, 0x01, 0x00, 0x04, 0x08,
    0x02, 0x00, 0x04, 0x08, 0x03, 0x00, 0x00, 0x0a, 0x08, midi, 0x00, 0x7f, 0x09, 0x01, 0x00, 0x05,
    0x0c, 0x0c, 0x00, 0x08, 0x0d, 0x00, 0x00, 0x09, 0x0e, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x7f,
    0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  ];

  return block;
}

function getPadBlock2(midi, fileName="", fileNameB="") {
  // (0x39) midi

  // (0x87) fileName length
  // (0x88-0x8f) fileName (all caps, pad right with 0's)
  // (0x90-0x97) fileName (pad right with 0's)

  // (0xa7) fileNameB length
  // (0xa8-0xaf) fileNameB (all caps, pad right with 0's)
  // (0xb0-0xb7) fileNameB (pad right with 0's)

  // (0x80) 0xaa if has layer a, 0xff if doesnt have layer a
  // (0xa0) 0xaa if has layer b, 0xff if doesnt have layer b

  let block = [
    0x4b, 0x49, 0x54, 0x49, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x00, 0x09, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0a, 0x01, 0x00, 0x04, 0x08,
    0x02, 0x00, 0x04, 0x08, 0x03, 0x00, 0x00, 0x0a, 0x08, midi, 0x00, 0x7f, 0x09, 0x01, 0x00, 0x05,
    0x0c, 0x0c, 0x00, 0x08, 0x0d, 0x00, 0x00, 0x09, 0x0e, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xaa, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xaa, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  ];


  // splice in the filename
  let fileNameUpperBytes = unpack(fileName.toUpperCase(), 8, 0x20)
  let fileNameBytes = unpack(fileName, 8, 0x00)
  block.splice(0x87, 1, fileName.length);
  block.splice(0x88, 8, ...fileNameUpperBytes);
  block.splice(0x90, 8, ...fileNameBytes);
  block.splice(0x80, 1, ((fileName === "") ? 0xff : 0xaa));

  // splice in the filename
  let fileNameBUpperBytes = unpack(fileNameB.toUpperCase(), 8, 0x20)
  let fileNameBBytes = unpack(fileNameB, 8, 0x00)
  block.splice(0xa7, 1, fileNameB.length);
  block.splice(0xa8, 8, ...fileNameBUpperBytes);
  block.splice(0xb0, 8, ...fileNameBBytes);
  block.splice(0xa0, 1, ((fileNameB === "") ? 0xff : 0xaa));

  return block;
}

function getPadBlock1Buffer(){
  let block = [
    0x4b, 0x49, 0x54, 0x49, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
    0x4d, 0x75, 0x74, 0x65, 0x00, 0x48, 0x20, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xc7, 0x00, 0x18, 0x00, 0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0a, 0x01, 0x00, 0x04, 0x08,
    0x02, 0x02, 0x04, 0x08, 0x03, 0x03, 0x00, 0x0a, 0x08, 0x3b, 0x00, 0x7f, 0x09, 0x01, 0x00, 0x05,
    0x0c, 0x00, 0x00, 0x08, 0x0d, 0x00, 0x00, 0x09, 0x0e, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x7f,
    0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe7,
    0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe7, 0x12, 0x00, 0x03, 0xe7, 0x00, 0x00, 0x03, 0xe7,
    0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe7,
    0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe7, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe7,
    0x17, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x64, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64,
    0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  ];
  return block;
}

function getPadBlock2Buffer(){
  let block = [
    0x4b, 0x49, 0x54, 0x49, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x00, 0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0a, 0x01, 0x00, 0x04, 0x08,
    0x02, 0x02, 0x04, 0x08, 0x03, 0x03, 0x00, 0x0a, 0x08, 0x3b, 0x00, 0x7f, 0x09, 0x01, 0x00, 0x05,
    0x0c, 0x00, 0x00, 0x08, 0x0d, 0x00, 0x00, 0x09, 0x0e, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  ];
  return block;
}

export function getBuffer() {
  let buffer = [];

  // header
  buffer = buffer.concat(getHeader());

  // pads block 1: snr_a,snr_b,tom1a,tom1b,tom2a,tom2b,tom3a,tom3b,cr1a,cr1b,cr2a,cr2b,ridea
  buffer = buffer.concat(getPadBlock1(0x01));
  buffer = buffer.concat(getPadBlock1(0x02));
  buffer = buffer.concat(getPadBlock1(0x03));
  buffer = buffer.concat(getPadBlock1(0x04));
  buffer = buffer.concat(getPadBlock1(0x05));
  buffer = buffer.concat(getPadBlock1(0x06));
  buffer = buffer.concat(getPadBlock1(0x07));
  buffer = buffer.concat(getPadBlock1(0x08));
  buffer = buffer.concat(getPadBlock1(0x09));
  buffer = buffer.concat(getPadBlock1(0x0a));
  buffer = buffer.concat(getPadBlock1(0x0b));
  buffer = buffer.concat(getPadBlock1(0x0c));
  buffer = buffer.concat(getPadBlock1(0x0d));

  // block 1 buffer
  buffer = buffer.concat(getPadBlock1Buffer());

  // pads block 1: rideb,kick,hha_op,hhb_op,hha_md,hhb_md,hha_cl,hhb_cl,hh_chk,hh_spl
  buffer = buffer.concat(getPadBlock1(0x0e));
  buffer = buffer.concat(getPadBlock1(0x0f));
  buffer = buffer.concat(getPadBlock1(0x10));
  buffer = buffer.concat(getPadBlock1(0x11));
  buffer = buffer.concat(getPadBlock1(0x12));
  buffer = buffer.concat(getPadBlock1(0x13));
  buffer = buffer.concat(getPadBlock1(0x14));
  buffer = buffer.concat(getPadBlock1(0x15));
  buffer = buffer.concat(getPadBlock1(0x16));
  buffer = buffer.concat(getPadBlock1(0x17));

  // pads block 2: snr_a,snr_b,tom1a,tom1b,tom2a,tom2b,tom3a,tom3b,cr1a,cr1b,cr2a,cr2b,ridea
  buffer = buffer.concat(getPadBlock2(0x01,"","1-CAat1"));
  buffer = buffer.concat(getPadBlock2(0x02,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x03,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x04,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x05,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x06,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x07,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x08,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x09,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x0a,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x0b,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x0c,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x0d,"1-CAat1",""));

  // block 2 buffer
  buffer = buffer.concat(getPadBlock2Buffer());

  // pads block 2: rideb,kick,hha_op,hhb_op,hha_md,hhb_md,hha_cl,hhb_cl,hh_chk,hh_spl
  buffer = buffer.concat(getPadBlock2(0x0e,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x0f,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x10,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x11,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x12,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x13,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x14,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x15,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x16,"1-CAat1",""));
  buffer = buffer.concat(getPadBlock2(0x17,"1-CAat1",""));

  // splice in the checksum
  let checksum = calculateChecksumFromBuffer(buffer);
  buffer.splice(KitBuffer.CHECKSUM_BYTE, 1, checksum);

  return Buffer.from(buffer);
}

export const calculateChecksumFromBuffer = (buffer) => {
  return buffer
    .slice(KitBuffer.CHECKSUM_BYTE + 1)
    .reduce((a, b) => a + b) % 256;
}

export const writeTestFile = (fileName) => {
  let buffer = getBuffer();

  // save this as a file
  let tmpFile = fileName;
  fs.open(tmpFile, "w", (err, fd) => {
    if (err) throw err;

    fs.write(fd, buffer, 0, buffer.length, null, function(err) {
        if (err) throw 'error writing file: ' + err;
        fs.close(fd, function() {
            console.log('wrote the file successfully');
        });
    });
  });
}
